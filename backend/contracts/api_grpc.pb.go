// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.27.3
// source: contracts/api.proto

package contracts

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	MyHelloService_Hello_FullMethodName       = "/MyHelloService/Hello"
	MyHelloService_HelloStream_FullMethodName = "/MyHelloService/HelloStream"
)

// MyHelloServiceClient is the client API for MyHelloService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MyHelloServiceClient interface {
	Hello(ctx context.Context, in *HelloRequest, opts ...grpc.CallOption) (*HelloResponse, error)
	HelloStream(ctx context.Context, in *HelloRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[HelloResponse], error)
}

type myHelloServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMyHelloServiceClient(cc grpc.ClientConnInterface) MyHelloServiceClient {
	return &myHelloServiceClient{cc}
}

func (c *myHelloServiceClient) Hello(ctx context.Context, in *HelloRequest, opts ...grpc.CallOption) (*HelloResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(HelloResponse)
	err := c.cc.Invoke(ctx, MyHelloService_Hello_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *myHelloServiceClient) HelloStream(ctx context.Context, in *HelloRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[HelloResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &MyHelloService_ServiceDesc.Streams[0], MyHelloService_HelloStream_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[HelloRequest, HelloResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type MyHelloService_HelloStreamClient = grpc.ServerStreamingClient[HelloResponse]

// MyHelloServiceServer is the server API for MyHelloService service.
// All implementations must embed UnimplementedMyHelloServiceServer
// for forward compatibility.
type MyHelloServiceServer interface {
	Hello(context.Context, *HelloRequest) (*HelloResponse, error)
	HelloStream(*HelloRequest, grpc.ServerStreamingServer[HelloResponse]) error
	mustEmbedUnimplementedMyHelloServiceServer()
}

// UnimplementedMyHelloServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedMyHelloServiceServer struct{}

func (UnimplementedMyHelloServiceServer) Hello(context.Context, *HelloRequest) (*HelloResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Hello not implemented")
}
func (UnimplementedMyHelloServiceServer) HelloStream(*HelloRequest, grpc.ServerStreamingServer[HelloResponse]) error {
	return status.Errorf(codes.Unimplemented, "method HelloStream not implemented")
}
func (UnimplementedMyHelloServiceServer) mustEmbedUnimplementedMyHelloServiceServer() {}
func (UnimplementedMyHelloServiceServer) testEmbeddedByValue()                        {}

// UnsafeMyHelloServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MyHelloServiceServer will
// result in compilation errors.
type UnsafeMyHelloServiceServer interface {
	mustEmbedUnimplementedMyHelloServiceServer()
}

func RegisterMyHelloServiceServer(s grpc.ServiceRegistrar, srv MyHelloServiceServer) {
	// If the following call pancis, it indicates UnimplementedMyHelloServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&MyHelloService_ServiceDesc, srv)
}

func _MyHelloService_Hello_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HelloRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MyHelloServiceServer).Hello(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MyHelloService_Hello_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MyHelloServiceServer).Hello(ctx, req.(*HelloRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MyHelloService_HelloStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(HelloRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(MyHelloServiceServer).HelloStream(m, &grpc.GenericServerStream[HelloRequest, HelloResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type MyHelloService_HelloStreamServer = grpc.ServerStreamingServer[HelloResponse]

// MyHelloService_ServiceDesc is the grpc.ServiceDesc for MyHelloService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MyHelloService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "MyHelloService",
	HandlerType: (*MyHelloServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Hello",
			Handler:    _MyHelloService_Hello_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "HelloStream",
			Handler:       _MyHelloService_HelloStream_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "contracts/api.proto",
}
